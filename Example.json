{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0.0+cu117\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import mplcyberpunk\n",
    "plt.style.use('cyberpunk')\n",
    "\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader, WeightedRandomSampler\n",
    "from torch import nn, optim\n",
    "\n",
    "print(torch.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "alphabet = ['A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y']\n",
    "\n",
    "data = pd.read_csv(\"/home/jememaga/Data2/protenomes_proteins.csv\")\n",
    "\n",
    "from data_process import concat_data\n",
    "data, classes = concat_data([data])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Class</th>\n",
       "      <th>Sequence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>virus</td>\n",
       "      <td>METNKNTYSRIVDTVEPITAVAFTIYSNTDVVKYSAISDPNGITVA...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>virus</td>\n",
       "      <td>MNTDWKNTSLVDLENKIIKFWRNIDATKKVLEKTKNYPKKNFLDGP...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>virus</td>\n",
       "      <td>MSKKSKEVEDVNSNYDSEPFFGLLDLFFERNNQILVSHHIESFNQL...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>virus</td>\n",
       "      <td>MELSQNFQKYFSIENPNKITKILRKNDHTNDKYEWIVLEKIHGANF...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>virus</td>\n",
       "      <td>MENITQLVNNYLRGCISSCFPQVINVNEYSVIKSNKHDYQFNRLAH...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Class                                           Sequence\n",
       "0  virus  METNKNTYSRIVDTVEPITAVAFTIYSNTDVVKYSAISDPNGITVA...\n",
       "1  virus  MNTDWKNTSLVDLENKIIKFWRNIDATKKVLEKTKNYPKKNFLDGP...\n",
       "2  virus  MSKKSKEVEDVNSNYDSEPFFGLLDLFFERNNQILVSHHIESFNQL...\n",
       "3  virus  MELSQNFQKYFSIENPNKITKILRKNDHTNDKYEWIVLEKIHGANF...\n",
       "4  virus  MENITQLVNNYLRGCISSCFPQVINVNEYSVIKSNKHDYQFNRLAH..."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'virus': 0, 'archaea': 1, 'eucariote': 2, 'bacteria': 3}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classes"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build vocabulary for label encoder or k-mers encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from data_process import build_bin_vocab, build_kmer_vocab\n",
    "\n",
    "bin_vocab = build_bin_vocab(alphabet)\n",
    "\n",
    "k=3\n",
    "kmer_vocab = build_kmer_vocab(alphabet, k)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get encoding functions for label encoder or k-mers encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from data_process import encoding\n",
    "\n",
    "bin_encoding = encoding(mode='label_encoder', vocab=bin_vocab) \n",
    "kmer_encoding = encoding(mode='kmer_encoder', vocab=kmer_vocab, k=k)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split data for train, validation and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from data_process import split_data\n",
    "\n",
    "seed = 42\n",
    "np.random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "\n",
    "train_list, valid_list, test_list = split_data(data=data, classes=classes, train_size=0.8, seed=seed)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pass data into torch.utils.data.Dataset types, that works better !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from data_process import TextDataset\n",
    "\n",
    "bin_train_dataset = TextDataset(data = train_list, encoding_fn = bin_encoding)\n",
    "kmer_train_dataset = TextDataset(data = train_list, encoding_fn = kmer_encoding)\n",
    "\n",
    "bin_valid_dataset = TextDataset(data = valid_list, encoding_fn = bin_encoding)\n",
    "kmer_valid_dataset = TextDataset(data = valid_list, encoding_fn = kmer_encoding)\n",
    "\n",
    "bin_test_dataset = TextDataset(data = test_list, encoding_fn = bin_encoding)\n",
    "kmer_test_dataset = TextDataset(data = test_list, encoding_fn = kmer_encoding)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### device agnostic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = \"cuda\" if torch.cuda.is_available() else 'cpu'"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Class', ylabel='count'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=data, x=\"Class\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Because we have unbalanced data, we can use a Weighted Random Sampler or Weighted Cross Entropy Loss to train our models."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1 - Weighted Random Sampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from data_process import get_collate_fn, get_weigths_for_wsampler\n",
    "\n",
    "# this collate function is essential, don't forget this !\n",
    "collate_fn = get_collate_fn()\n",
    "\n",
    "# bin_train_dataset and kmer_train_dataset have the same length, so you can use the same sampler\n",
    "sampler = WeightedRandomSampler(get_weigths_for_wsampler(train_list), len(bin_train_dataset), replacement=True)\n",
    "\n",
    "# you can change it \n",
    "batch_size = 100\n",
    "\n",
    "bin_train_loader = DataLoader(bin_train_dataset, batch_size=batch_size, sampler=sampler, collate_fn=collate_fn, drop_last=False)\n",
    "bin_valid_loader = DataLoader(bin_valid_dataset, batch_size=batch_size, collate_fn=collate_fn, shuffle=True, drop_last=False)\n",
    "bin_test_loader = DataLoader(bin_test_dataset, batch_size=batch_size, collate_fn=collate_fn, shuffle=True, drop_last=False)\n",
    "\n",
    "kmer_train_loader = DataLoader(kmer_train_dataset, batch_size=batch_size, sampler=sampler, collate_fn=collate_fn, drop_last=False)\n",
    "kmer_valid_loader = DataLoader(kmer_valid_dataset, batch_size=batch_size, collate_fn=collate_fn, shuffle=True, drop_last=False)\n",
    "kmer_test_loader = DataLoader(kmer_test_dataset, batch_size=batch_size, collate_fn=collate_fn, shuffle=True, drop_last=False)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Models building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jememaga/.local/lib/python3.9/site-packages/torch/cuda/__init__.py:546: UserWarning: Can't initialize NVML\n",
      "  warnings.warn(\"Can't initialize NVML\")\n"
     ]
    }
   ],
   "source": [
    "from models import LSTMnet2, LSTMnet\n",
    "\n",
    "# I used the same settings to set both networks, but you can customize for each if you want\n",
    "\n",
    "embedding_dim = 100\n",
    "lstm1_dim = 64\n",
    "dropout1 = 0.2\n",
    "lstm2_dim = 32\n",
    "dropout2 = 0.2\n",
    "num_layers = 2\n",
    "hidden_dim = 64\n",
    "out_dim = len(classes)\n",
    "\n",
    "#### Model with 2 lstm , use model_le for data encoded by label encoder and model_kmer for data encoded by kmer encoder\n",
    "\n",
    "model1_le = LSTMnet2(len(bin_vocab)+1, embedding_dim, lstm1_dim, dropout1, lstm2_dim, dropout2, num_layers, hidden_dim, out_dim)\n",
    "# don't forget to pass to the actual device\n",
    "model1_le = model1_le.to(device)\n",
    "\n",
    "model1_kmer = LSTMnet2(len(kmer_vocab)+1, embedding_dim, lstm1_dim, dropout1, lstm2_dim, dropout2, num_layers, hidden_dim, out_dim)\n",
    "model1_kmer = model1_kmer.to(device)\n",
    "\n",
    "#### Model with 1 lstm\n",
    "\n",
    "model2_le = LSTMnet(len(bin_vocab)+1, embedding_dim, lstm1_dim, hidden_dim, out_dim, dropout1)\n",
    "model2_le = model2_le.to(device)\n",
    "\n",
    "model2_kmer = LSTMnet(len(kmer_vocab)+1, embedding_dim, lstm1_dim, hidden_dim, out_dim, dropout1)\n",
    "model2_kmer = model2_kmer.to(device)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CrossEntropyLoss()"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from engine import train\n",
    "\n",
    "# loss function\n",
    "loss_fn = nn.CrossEntropyLoss()\n",
    "loss_fn.to(device)\n",
    "\n",
    "# optimizer is defined to Adam by default in train "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9ef08ad7a5be44d6b1f73b54aa78bbbc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1438 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0780933fa1f643078ac90eff698ebcff",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/180 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**************************************************\n",
      "Epoch : 1\n",
      "Train --> loss : 1.0588464571968736 | acc 0.6793200335930385\n",
      "Evaluation --> loss 0.969740409983529 | acc 0.7747283935546875\n",
      "**************************************************\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "14286779d9624cfe859e38f033dc534f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1438 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "da430adad8ac460abc7fc05655c1ca6d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/180 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2311f67fb2c844688aafbd35d1b25475",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1438 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f9cfbe544d4d4877a8d235b8e1b5d704",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/180 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "968ec9f5c4374a66ab206704b0a0bdd8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1438 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "159ab930ec7d45268824e11d422bb075",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/180 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f6acb72fbd7242cab5595d69bd8f968a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1438 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "024228f00a21476ea9d37ff2a3d15796",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/180 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "Training takes 2863.3772959709167 seconds\n",
      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
     ]
    }
   ],
   "source": [
    "## train model with label encoder\n",
    "results = train(model=model1_le, loss_fn=loss_fn, device=device, train_loader=bin_train_loader, valid_loader=bin_valid_loader, n_epochs=5, patience=3, n_classes=len(classes))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1, 2, 1)\n",
    "plt.title(\"Loss\", color='yellow')\n",
    "plt.plot(results[\"train_loss\"], label='train')\n",
    "plt.plot(results[\"valid_loss\"], label='valid')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.title(\"Accuracy\")\n",
    "plt.plot(results[\"train_acc\"], label='train')\n",
    "plt.plot(results[\"valid_acc\"], label='valid')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f45f28e28b634a77840dcd23e0df187f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/180 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jememaga/engine.py:227: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  results[\"y_true\"] = np.array(results[\"y_true\"])\n",
      "/home/jememaga/engine.py:228: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  results[\"y_pred\"] = np.array(results[\"y_pred\"])\n"
     ]
    }
   ],
   "source": [
    "from engine import test\n",
    "\n",
    "results_model1_bin = test(model1_le, bin_test_loader, device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm_model1_bin = confusion_matrix(results_model1_bin[\"y_true\"], results_model1_bin[\"y_pred\"])\n",
    "\n",
    "# Normalise\n",
    "cm_model1_bin = cm_model1_bin.astype('float') / cm_model1_bin.sum(axis=1)[:, np.newaxis]\n",
    "\n",
    "f, ax = plt.subplots(1, 1, figsize=(6, 4))\n",
    "\n",
    "g1 = sns.heatmap(cm_model1_bin, annot=True, fmt='.2%', xticklabels=classes, yticklabels=classes, cbar=False, ax=ax, cmap=\"YlGnBu\")\n",
    "\n",
    "ax.set_ylabel('Actual')\n",
    "ax.set_xlabel('Predicted')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thanks !"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
